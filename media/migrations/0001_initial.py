# Generated by Django 3.1.5 on 2021-08-29 11:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import media.manager
import media.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=25, verbose_name='first name')),
                ('last_name', models.CharField(max_length=25, verbose_name='last name')),
                ('date_joined', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_online', models.BooleanField(default=True, verbose_name='online')),
                ('BirthDate', models.DateTimeField(blank=True, null=True)),
                ('gender', models.CharField(choices=[(1, 'Male'), (2, 'Female')], max_length=255, null=True)),
                ('bio', models.CharField(blank=True, max_length=100, null=True)),
                ('pic', models.ImageField(blank=True, default='images/profiles/profile.jpg', null=True, upload_to=media.models.get_profile_pic_path)),
                ('cover', models.ImageField(blank=True, default='images/profiles/cover.webp', null=True, upload_to=media.models.get_profile_cover_path)),
                ('is_superuser', models.BooleanField(default=False, verbose_name='superuser')),
                ('is_admin', models.BooleanField(default=False, verbose_name='admin')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('blocked', models.ManyToManyField(blank=True, related_name='user_blocked', to=settings.AUTH_USER_MODEL)),
                ('chatted_with', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('crush', models.ManyToManyField(blank=True, related_name='user_crush', to=settings.AUTH_USER_MODEL)),
                ('followers', models.ManyToManyField(blank=True, related_name='user_followers', to=settings.AUTH_USER_MODEL)),
                ('following', models.ManyToManyField(blank=True, related_name='user_following', to=settings.AUTH_USER_MODEL)),
                ('friends', models.ManyToManyField(blank=True, related_name='user_friends', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', media.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_cover_photo', models.ImageField(blank=True, null=True, upload_to=media.models.get_group_img_path)),
                ('group_name', models.TextField()),
                ('group_admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_author', to=settings.AUTH_USER_MODEL)),
                ('group_members', models.ManyToManyField(blank=True, related_name='group_members', to=settings.AUTH_USER_MODEL)),
                ('group_members_blocked', models.ManyToManyField(blank=True, related_name='group_blocked_members', to=settings.AUTH_USER_MODEL)),
                ('group_members_waiting', models.ManyToManyField(blank=True, related_name='group_waiting_members', to=settings.AUTH_USER_MODEL)),
                ('group_sub_admin', models.ManyToManyField(blank=True, related_name='group_sub_author', to=settings.AUTH_USER_MODEL)),
                ('invite_group_members', models.ManyToManyField(blank=True, related_name='invited_group_members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_photo', models.ImageField(blank=True, null=True, upload_to=media.models.get_page_img_path)),
                ('page_cover_photo', models.ImageField(blank=True, null=True, upload_to=media.models.get_page_img_path)),
                ('page_name', models.TextField()),
                ('page_bio', models.TextField(blank=True, null=True)),
                ('page_admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='page_author', to=settings.AUTH_USER_MODEL)),
                ('page_blocked_members', models.ManyToManyField(blank=True, related_name='page_blocked_members', to=settings.AUTH_USER_MODEL)),
                ('page_likes', models.ManyToManyField(blank=True, related_name='page_like', to=settings.AUTH_USER_MODEL)),
                ('page_sub_admin', models.ManyToManyField(blank=True, related_name='page_sub_author', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserCrushs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crush', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crushed', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='crusher', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_type', models.IntegerField(choices=[(1, 'Post'), (2, 'Page'), (3, 'User'), (4, 'Group')], null=True)),
                ('searched', models.CharField(max_length=100)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='searched_group', to='media.group')),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='searched_page', to='media.page')),
                ('searcher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='searcher', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='searched_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notifications_type', models.IntegerField(choices=[(1, 'Likes'), (2, 'Love'), (3, 'Haha'), (4, 'Sad'), (5, 'Wow'), (6, 'Angry'), (7, 'Comment'), (8, 'Reply'), (9, 'Share'), (10, 'follow'), (11, 'crush'), (12, 'invite')], null=True)),
                ('notifications_obj', models.IntegerField(choices=[(1, 'Post'), (2, 'Comment'), (3, 'Reply'), (4, 'Page'), (5, 'Group')], null=True)),
                ('text_preview', models.CharField(blank=True, max_length=90)),
                ('is_seen', models.BooleanField(default=False)),
                ('react', models.BooleanField(default=False)),
                ('is_comment', models.BooleanField(default=False)),
                ('is_reply', models.BooleanField(default=False)),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notify_group', to='media.group')),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notify_page', to='media.page')),
                ('receiver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notif_post_to_user', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notif_post_from_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-when'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='users_groups', to='media.Group'),
        ),
        migrations.AddField(
            model_name='user',
            name='pages',
            field=models.ManyToManyField(blank=True, related_name='users_pages', to='media.Page'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='waiting',
            field=models.ManyToManyField(blank=True, related_name='user_waiting', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='waiting_for',
            field=models.ManyToManyField(blank=True, related_name='user_waiting_for', to=settings.AUTH_USER_MODEL),
        ),
    ]
